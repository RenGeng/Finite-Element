/* Variables générales*/

load "gmsh";
mesh Th=gmshload("../Data/sous-marin.msh");
// plot(Th, wait= true, cmm = "Mon superbe maillage");

fespace Vh(Th, P1);
Vh<complex> uh,vh;

complex L=1i;
real k = 2*pi;
real alpha = 0;
func uinc=exp(k*L*(x*cos(alpha) + y*sin(alpha)));

/* Résolution plus rapide */

// couleur de plot
real[int] colorhsv=[ // color hsv model
    4./6., 1 , 0.5, // dark blue
    4./6., 1 , 1, // blue
    5./6., 1 , 1, // magenta
    1, 1. , 1, // red
    1, 0.5 , 1 // light red
    ];

// real cpu=clock();
// solve HelmholtzS(uh,vh) = -int2d(Th)(dx(uh)*dx(vh)) -int2d(Th)(dy(uh)*dy(vh)) 
// + int2d(Th)(k*k*(uh)*(vh)) + on (3,uh=-uinc) - int1d(Th,2)(L*k*uh*vh);

solve Helmholtz (uh , vh, solver=LU) = int2d ( Th ) ( dx ( uh ) * dx ( vh ) ) + int2d ( Th ) ( dy ( uh ) * dy ( vh ) )
                                       -  int2d ( Th ) ( k*k*uh  * vh  ) - int1d ( Th, 2 ) (  1i*k*uh* vh ) + on(3,uh=uinc);

// cout<<"CPU time="<<clock()-cpu<<endl;

{ 
  ofstream fout("mat_U.txt") ;
  fout << uh[] << endl ;
} 

Vh<complex> uabs = abs(uh + uinc);
Vh<complex> ure = real(uh);
Vh<complex> uim = imag(uh);

plot(uh,wait = true, cmm = "Solution complet", value = true, fill = true, dim = 2);
plot(ure,wait = true, cmm = "Solution relle", value = true, fill = true, dim = 2 );
plot(uim,wait = true, cmm = "Solution imaginaire", value = true, fill = true, dim = 2);

// Pour obtenir les parties réelles, valeur absolue :
include "gmshExport.idp";
gmshExport(Th, uh[], "uh.pos");
gmshExport(Th, ure[], "ure.pos");
gmshExport(Th, uim[], "uim.pos");
gmshExport(Th, uabs[], "uabs.pos");